
{% extends 'home/home.html.twig' %}
  {% block m %}
        
    {% endblock %}

    {% block t %}
<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
<!-- Bootstrap JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<body>
    <h1>Booking Calendar</h1>

    <div class="container">
        <div class="row">
            <div class="col-md-8">
                <!-- Calendar -->
                <div class="calendar">
                    <div class="calendar-header">
                        <button class="prev-month">&lt;</button>
                        <h2 class="month-year">February 2024</h2>
                        <button class="today-btn">Today</button>
                        <button class="next-month">&gt;</button>
                    </div>
                    <div class="weekdays">
                        <div class="day">Sun</div>
                        <div class="day">Mon</div>
                        <div class="day">Tue</div>
                        <div class="day">Wed</div>
                        <div class="day">Thu</div>
                        <div class="day">Fri</div>
                        <div class="day">Sat</div>
                    </div>
                    <div class="days">
                        <!-- Days of the month will be inserted here dynamically -->
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <!-- Reservation Details -->
                <div id="timeSlots" class="reservation-cards-container">
                    <div class="reservation-cards">
                        <!-- Time slots will be inserted here dynamically -->
                        {% for slot in slots %}
                            <div class="card">
                                <div class="card-body">
                                    <p class="card-text"><strong>Start Time:</strong> {{ slot.start }}</p>
                                    <p class="card-text"><strong>End Time:</strong> {{ slot.end }}</p>
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
             <div id="selectedDateTime">
                <h2>Selected Date and Time:</h2>
                <p><strong>Date:</strong> <span id="selectedDate"></span></p>
                <p><strong>Start Time:</strong> <span id="selectedStartTime"></span></p>
                <p><strong>End Time:</strong> <span id="selectedEndTime"></span></p>
            </div>
            <div class="validate-button-container">
                <a href="{{ path('app_reservation_new', {'stadiumId': stadiumId}) }}" class="validate-button">
                    <img src="{{ asset('Images/calendar.png') }}">Validate Booking
                </a>
            </div>
        </div>
    </div>

    <script>

        document.addEventListener('DOMContentLoaded', function() {
        const calendarEl = document.querySelector('.calendar');
        const headerEl = calendarEl.querySelector('.month-year');
        const daysContainer = calendarEl.querySelector('.days');
        const prevMonthBtn = calendarEl.querySelector('.prev-month');
        const nextMonthBtn = calendarEl.querySelector('.next-month');
        const todayBtn = calendarEl.querySelector('.today-btn');
        const slots = document.getElementById('timeSlots');

        const selectedDateDisplay = document.getElementById('selectedDate');
        const selectedStartTimeDisplay = document.getElementById('selectedStartTime');
        const selectedEndTimeDisplay = document.getElementById('selectedEndTime');

        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

        let currentDate = new Date();
        let selectedDate = new Date(); // Define selectedDate variable
        let selectedSlot = null; // Define selectedSlot variable

        function generateCalendar() {
            headerEl.textContent = `${months[currentDate.getMonth()]} ${currentDate.getFullYear()}`;

            daysContainer.innerHTML = '';

            // Fill in the days of the month
            const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDay();
            const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();

            for (let i = 0; i < firstDayOfMonth; i++) {
                const prevMonthDay = document.createElement('div');
                prevMonthDay.classList.add('day-cell', 'prev-month');
                const prevMonthDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0 - i);
                prevMonthDay.textContent = prevMonthDate.getDate();
                daysContainer.appendChild(prevMonthDay);
            }

            for (let i = 1; i <= daysInMonth; i++) {
                const dayCell = document.createElement('div');
                dayCell.classList.add('day-cell');
                dayCell.textContent = i;
                if (currentDate.getFullYear() === selectedDate.getFullYear() && currentDate.getMonth() === selectedDate.getMonth() && i === selectedDate.getDate()) {
                    dayCell.classList.add('selected-date');
                }
                daysContainer.appendChild(dayCell);
            }

            const totalDays = firstDayOfMonth + daysInMonth;
            const remainingDays = 42 - totalDays;

            for (let i = 1; i <= remainingDays; i++) {
                const nextMonthDay = document.createElement('div');
                nextMonthDay.classList.add('day-cell', 'next-month');
                const nextMonthDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, i);
                nextMonthDay.textContent = nextMonthDate.getDate();
                daysContainer.appendChild(nextMonthDay);
            }
        }

        // Initial calendar generation
        generateCalendar();

        // Event listeners for navigating to previous and next months
        prevMonthBtn.addEventListener('click', () => {
            currentDate.setMonth(currentDate.getMonth() - 1);
            generateCalendar();
        });

        nextMonthBtn.addEventListener('click', () => {
            currentDate.setMonth(currentDate.getMonth() + 1);
            generateCalendar();
        });

        // Event listener for the "Today" button
        todayBtn.addEventListener('click', () => {
            currentDate = new Date();
            selectedDate = new Date(); // Reset selectedDate when clicking Today
            generateCalendar();
        });

            // Update the event listener for selecting a date
         daysContainer.addEventListener('click', (event) => {
            const clickedCell = event.target.closest('.day-cell');
            if (clickedCell) {
                const day = parseInt(clickedCell.textContent);
                const month = currentDate.getMonth();
                const year = currentDate.getFullYear();
                selectedDate = new Date(year, month, day); // Update selectedDate

                // Display selected date
                selectedDateDisplay.textContent = selectedDate.toLocaleDateString();

                // Remove the existing selected date highlight
                document.querySelectorAll('.selected-date').forEach(element => {
                    element.classList.remove('selected-date');
                });
                // Apply highlight to the clicked date
                clickedCell.classList.add('selected-date');
            }
        });

        // Update the event listener for selecting a time slot
        slots.addEventListener('click', (event) => {
            const clickedSlot = event.target.closest('.card');
        if (clickedSlot) {
            const startTimeElement = clickedSlot.querySelector('.card-text:first-child').textContent.trim();
            const endTimeElement = clickedSlot.querySelector('.card-text:nth-child(2)').textContent.trim();
            selectedSlot = { start: startTimeElement, end: endTimeElement };

            // Separate start time
            const startTimeParts = selectedSlot.start.split(': ');
            const startTime = startTimeParts[1];

            // Separate end time
            const endTimeParts = selectedSlot.end.split(': ');
            const endTime = endTimeParts[1];
            // Remove the existing selected slot highlight
            document.querySelectorAll('.selected-slot').forEach(element => {
                element.classList.remove('selected-slot');
            });
            // Apply highlight to the clicked slot
            clickedSlot.classList.add('selected-slot');

            // Event listener for validating the booking
            const validateButton = document.querySelector('.validate-button');
            console.log('Booking Validated:', startTime,endTime);
            // Get the year, month, and day from the selectedDate
            const year = selectedDate.getFullYear();
            const month = (selectedDate.getMonth() + 1).toString().padStart(2, '0'); // Add 1 to month because it's zero-based index
            const day = selectedDate.getDate().toString().padStart(2, '0');

            // Concatenate year, month, and day with dashes to form the formatted date
            const formattedDate = `${year}-${month}-${day}`;

            console.log('Formatted Date:', formattedDate);
            selectedDateDisplay.textContent = selectedDate.toLocaleDateString(); // Update selected date display
                selectedStartTimeDisplay.textContent = startTime;
                selectedEndTimeDisplay.textContent = endTime;

            // Event listener for validating the booking
            validateButton.addEventListener('click', () => {
            if (selectedDate && startTime && endTime) {
                // Check if the selected date is not earlier than the current date
                const currentDate = new Date();
                if (selectedDate < currentDate) {
                    alert("Selected date cannot be earlier than the current date.");
                    return; // Stop further execution
                }

                console.log('Booking Validated:', selectedDate, startTime, endTime);

                // Send an AJAX request to save the booking
                $.ajax({
                    url: '{{ path('app_reservation_new', {'stadiumId': stadiumId}) }}',
                    method: 'POST',
                    data: {
                        selectedDate: selectedDate,
                        selectedStartTime: startTime,
                        selectedEndTime: endTime,
                        stadiumId: stadiumId
                    },
                    success: function(response) {
                        console.log('Booking successful:', response);
                        // Handle success response
                    },
                    error: function(xhr, status, error) {
                        console.error('Booking failed:', error);
                        // Handle error response
                    }
                });
            } else {
            showAlert("Selected date cannot be earlier than the current date.");
                // Display an error message or handle the scenario where either the date or slot is not selected
            }
        });

        }
    });
// Function to show the alert
function showAlert(message) {
    // Create the alert element
    var alertDiv = document.createElement("div");
    alertDiv.className = "alert";
    alertDiv.innerHTML = "<p>" + message + "</p>";

    // Append the alert to the body
    document.body.appendChild(alertDiv);

    // Blur the background
    document.body.classList.add("blur");

    // Remove the alert and blur class after 3 seconds
    setTimeout(function() {
        alertDiv.remove();
        document.body.classList.remove("blur");
    }, 3000);
}



});

    </script>

    <style>

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f5f5;
            margin: 0;
            padding: 0;
        }
        /* CSS Changes */

        /* Style for selected date */
        .selected-date {
            border-radius: 50%;
            background-color: lightgreen; /* Change background color for selected date */
            color: lightgreen; /* Change text color for selected date */
        }
        .calendar {
        max-width: calc(100% - 315px); /* Adjust the calendar width */
        margin: 20px auto;
        margin-bottom: 20px; 
         margin-right: -20px;
        border-radius: 15px;
        overflow: hidden;
        background-color: #fff;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        position: relative;
        }


        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: #3788D8;
            color: #fff;
            padding: 20px;
            border-radius: 15px 15px 0 0;
        }

        .month-year {
            margin: 0;
            font-size: 1.8em;
        }

        .today-btn {
            background-color: #fff;
            color: #3788D8;
            border: 2px solid #3788D8;
            border-radius: 5px;
            padding: 8px 15px;
            cursor: pointer;
            transition: background-color 0.3s, color 0.3s;
        }

        .today-btn:hover {
            background-color: #3788D8;
            color: #fff;
        }

        .weekdays {
            display: flex;
            background-color: #f0f0f0;
            border-radius: 0 0 15px 15px;
        }

        .day {
            flex: 1;
            text-align: center;
            padding: 15px;
            font-weight: bold;
            color: #666;
        }

        .days {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
        }

        .day-cell {
            text-align: center;
            padding: 20px 15px;
            background-color: #fff;
            transition: background-color 0.3s;
            cursor: pointer;
        }

        .day-cell:hover {
            background-color: #f0f0f0;
        }

        .prev-month,
        .next-month {
            background-color: transparent;
            border: none;
            cursor: pointer;
            font-size: 1.4em;
            padding: 8px 15px;
            color: #fff;
        }

        .prev-month:hover,
        .next-month:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }
        .reservation-cards-container {
        max-height: 600px;
        overflow-y: auto;
        padding-right: 15px;
        margin-top: 20px;
        margin-right: 250px;
        position: absolute;
        right: 0; /* Position the container to the right side */
        top: 0;
        width: 300px;
        border-radius: 15px;
        transition: box-shadow 0.3s ease;
        }

        .hover-scroll {
            position: relative; /* Make the container a positioning context for the scrollbar */
            margin-right: 0;
            padding-right: 15px;
            border-radius: 15px;
            transition: box-shadow 0.3s ease;
        }


        /* Customized Scrollbar */
        .reservation-cards-container::-webkit-scrollbar {
            width: 10px; /* Width of the scrollbar */
            background-color: #f9f9f9; /* Background color */
        }

        .reservation-cards-container::-webkit-scrollbar-thumb {
            background-color: #3788D8; /* Color of the scrollbar thumb */
            border-radius: 5px; /* Border radius */
        }

        /* Shadow Background */
        .hover-scroll::after {
        content: '';
        position: absolute;
        top: 0;
        left: 100%; /* Align to the right side of the container */
        width: 15px; /* Set the width of the shadow background */
        height: 100%;
        background: linear-gradient(180deg, rgba(255, 255, 255, 0) 0%, rgba(0, 0, 0, 0.1) 10%, rgba(0, 0, 0, 0.5) 100%);
        pointer-events: none;
        border-radius: 0 15px 15px 0; /* Adjust border-radius */
        transition: opacity 0.3s ease;
        opacity: 0;
        }

        /* Hover Effect */
        .hover-scroll:hover::after {
            opacity: 1; /* Show the background on hover */
        }

        /* Reservation Cards CSS */
        .reservation-cards {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            padding: 20px 0; /* Adjust padding as needed */
            z-index: 2; /* Ensure cards are above the shadow background */
            position: relative; /* Position for z-index */
        }

        .card {
            margin-bottom: 20px;
            border: 1px solid #ddd;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            background-color: #f9f9f9;
            width: 300px; /* Adjust width as needed */
            overflow: hidden;
            display: inline-block;
            vertical-align: top;
            transition: transform 0.3s ease-in-out;
            cursor: pointer;
        }

        .card:hover {
            transform: translateY(-5px);
        }

        .card-header {
            background-color: #3788D8;
            color: #fff;
            padding: 15px;
            border-radius: 10px 10px 0 0;
        }

        .card-body {
            padding: 15px;
        }

        .card-text {
            margin-bottom: 10px;
            font-size: 14px;
            line-height: 1.6;
        }

        .hover-scroll {
            position: relative;
            margin-right: 335px;
        }

        .reservation-cards-container {
            max-height: 600px;
            overflow-y: auto;
            padding-right: 15px;
            position: absolute;
            right: 20px;
            top: 0;
            width: 300px;
            border-radius: 15px;
            transition: box-shadow 0.3s ease;
        }

        /* Customized Scrollbar */
        .reservation-cards-container::-webkit-scrollbar {
            width: 10px;
            background-color: #f9f9f9;
        }

        .reservation-cards-container::-webkit-scrollbar-thumb {
            background-color: #3788D8;
            border-radius: 5px;
        }

        .reservation-cards {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            padding: 20px 0;
            z-index: 2;
            position: relative;
        }

        .card {
            margin-bottom: 20px;
            border: 1px solid #ddd;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            background-color: #f9f9f9;
            width: 300px;
            overflow: hidden;
            display: inline-block;
            vertical-align: top;
            transition: transform 0.3s ease-in-out;
        }

        .card:hover {
            transform: translateY(-5px);
        }
        .validate-button-container {
    text-align: center;
    margin-top: 20px;
    }

    .validate-button {
        background-color: #3788D8;
        color: #fff;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s, color 0.3s;
        display: inline-flex;
        align-items: center;
        border-bottom: none; /* Add this line to remove the border */
        decoration : none;
    }

    .validate-button img {
        width: 24px; /* Adjust the width of the image */
        height: 24px; /* Adjust the height of the image */
        margin-right: 10px; /* Add some spacing between the image and text */
    }

    .validate-button:hover {
        background-color: #1e6bd6; /* Adjust the hover background color */
    }

    .selected-slot {
        background-color: lightblue; /* Change the highlight color as needed */
    }

    </style>
</body>
{% endblock %}
{% block partners %}
    
    {% endblock %}
{% block footer %}
{% endblock %}
