<div style="display: flex;">
    <div style="flex: 1;">
        <!-- Left side of the form -->
        {{ form_start(form) }}
        <div class="form-group">
            {{ form_label(form.name) }}
            {{ form_widget(form.name, {'attr': {'class': 'form-control', 'placeholder': 'Club Name'}}) }}
            {% if form_errors(form.name) %}
                <div class="error-message">
                    {{ form_errors(form.name) }}
                </div>
            {% endif %}
        </div>

        <div class="form-group">
            {{ form_label(form.governorate) }}
            {{ form_widget(form.governorate, {'attr': {'class': 'form-control', 'placeholder': 'Governorate', 'id': 'club_governorate'}}) }}
            {% if form_errors(form.governorate) %}
                <div class="error-message">
                    {{ form_errors(form.governorate) }}
                </div>
            {% endif %}
        </div>

        <div class="form-group">
            {{ form_label(form.city) }}
            {{ form_widget(form.city, {'attr': {'class': 'form-control', 'placeholder': 'City', 'id': 'club_city'}}) }}
            {% if form_errors(form.city) %}
                <div class="error-message">
                    {{ form_errors(form.city) }}
                </div>
            {% endif %}
        </div>

        <div class="row">
            <div class="form-group col-md-6">
                {{ form_label(form.starttime) }}
                {{ form_widget(form.starttime, {'attr': {'class': 'form-control'}}) }}
                {% if form_errors(form.starttime) %}
                    <div class="error-message">
                        {{ form_errors(form.starttime) }}
                    </div>
                {% endif %}
            </div>
            <div class="form-group col-md-6">
                {{ form_label(form.endtime) }}
                {{ form_widget(form.endtime, {'attr': {'class': 'form-control'}}) }}
                {% if form_errors(form.endtime) %}
                    <div class="error-message">
                        {{ form_errors(form.endtime) }}
                    </div>
                {% endif %}
            </div>
        </div>

        <div class="form-group">
            {{ form_label(form.description) }}
            {{ form_widget(form.description, {'attr': {'class': 'form-control', 'rows': '5', 'placeholder': 'Description'}}) }}
            {% if form_errors(form.description) %}
                <div class="error-message">
                    {{ form_errors(form.description) }}
                </div>
            {% endif %}
        </div>

        <!-- Display existing images for editing -->
        {% if club.idimage is not empty %}
            <div class="existing-images">
                {% for image in club.idimage %}
                    <div class="existing-image" data-image-id="{{ image.id }}">
                        <img src="{{ asset(image.url) }}" alt="{{ image.name }}">
                        <input type="checkbox" name="removed_images[]" value="{{ image.id }}">
                        <label>Remove</label>
                    </div>
                {% endfor %}
            </div>
        {% endif %}

        <div class="form-group" id="image-preview">
            <!-- Selected image will be displayed here -->
            {% if form.images.vars.data is not empty %}
                {% for file in form.images.vars.data %}
                    <div class="existing-image">
                        <img src="{{ asset('Images/' ~ file.filename) }}" alt="Selected Image" style="max-width: 100px;">
                        <input type="checkbox" name="removed_images[]" value="{{ file.filename }}">
                        <label>Remove</label>
                    </div>
                {% endfor %}
            {% endif %}
        </div>

        <div class="form-group">
            {{ form_label(form.images) }}
            {{ form_widget(form.images, {'attr': {'class': 'form-control-file', 'onchange': 'previewImage(event)'}}) }}
            {% if form_errors(form.images) %}
                <div class="error-message">
                    {{ form_errors(form.images) }}
                </div>
            {% endif %}
        </div>
    </div>
<div style="flex: 1; display: flex;">
    <div style="flex: 1; display: flex; flex-direction: column; justify-content: flex-end;">
        <div style="flex: 1;">
            <!-- Map -->
            <div id="map" style="width: 100%; height: 100%;"></div>
        </div>
        <div style="flex: 1;">
            <!-- Latitude -->
            <div class="form-group">
                {{ form_label(form.latitude) }}
                {{ form_widget(form.latitude, {'attr': {'class': 'form-control','id': 'club_latitude', 'readonly': 'readonly'}}) }}
                {% if form_errors(form.latitude) %}
                    <div class="error-message">
                        {{ form_errors(form.latitude) }}
                    </div>
                {% endif %}
            </div>
            <!-- Longitude -->
            <div class="form-group">
                {{ form_label(form.longitude) }}
                {{ form_widget(form.longitude, {'attr': {'class': 'form-control','id': 'club_longitude', 'readonly': 'readonly'}}) }}
                {% if form_errors(form.longitude) %}
                    <div class="error-message">
                        {{ form_errors(form.longitude) }}
                    </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>

</div>

<!-- CSS -->
<style>
    .existing-image {
        display: inline-block;
        margin-right: 10px;
    }

    .existing-image img {
        max-width: 100px; /* Adjust the width as needed */
        height: auto;
        display: block;
        margin-bottom: 5px;
    }

    .remove-image {
        display: block;
        margin-top: 5px;
        color: red;
        cursor: pointer;
    }

    .btn-submit {
        padding: 10px 20px; /* Adjust the padding to change the button size */
    }

    .btn-submit img {
        width: 20px; /* Adjust the width of the image */
        height: auto; /* Maintain aspect ratio */
        margin-right: 5px; /* Add some spacing between the image and text */
    }

    /* CSS to style the error message */
    .error-message {
        color: #d9534f; /* Red color for error messages */
        font-size: 14px; /* Adjust the font size */
        margin-top: 5px; /* Add some space above the error message */
    }
</style>

<!-- Submit and Return buttons -->
<button type="submit" class="btn btn-primary btn-submit">
    <img src="{{ asset('Images/ballin.png') }}" alt="Save">
    {{ button_label|default('Save') }}
</button>

<button type="button" onclick="window.location.href='{{ path('app_club_index') }}'" class="btn btn-primary btn-back">
    Return
    <img src="{{ asset('Images/return.png') }}" alt="Back to list">
</button>


<script>
  function previewImage(event) {
    const input = event.target;
    const preview = document.getElementById('image-preview');

    if (input.files && input.files.length > 0) {
        for (let i = 0; i < input.files.length; i++) {
            const reader = new FileReader();
            reader.onload = function (e) {
                // Create img element for preview
                const img = document.createElement('img');
                img.src = e.target.result;
                img.alt = 'Selected Image';
                img.className = 'existing-image';
                img.style.maxWidth = '100px'; // Adjust the width as needed
                preview.appendChild(img);

                // Create remove button
                const removeButton = document.createElement('a');
                removeButton.href = '#';
                removeButton.textContent = 'Remove';
                removeButton.onclick = function(event) {
                    event.preventDefault();

                    // Send a request to the server to delete the image from the database
                    const imageId = getImageId(this); // Get the image ID
                    deleteImage(imageId);

                    // Remove the image and the remove button from the preview
                    preview.removeChild(img);
                    preview.removeChild(removeButton);
                };
                preview.appendChild(removeButton);
            };
            reader.readAsDataURL(input.files[i]);
        }
    }
}

// Function to get the image ID from the remove button's data attribute
function getImageId(removeButton) {
    return removeButton.getAttribute('data-image-id');
}

// Function to send a request to the server to delete the image from the database
// Function to send a request to the server to delete the image from the database
function deleteImage(imageId) {
    fetch('{{ path('remove_image') }}', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ image_id: imageId }),
    })
    .then(response => {
        if (!response.ok) {
            console.error('Failed to delete image from the database.');
        }
    })
    .catch(error => {
        console.error('Error deleting image:', error);
    });
}


// Remove image functionality
document.addEventListener('DOMContentLoaded', function() {
    const removeLinks = document.querySelectorAll('.remove-image');

    removeLinks.forEach(function(link) {
        link.addEventListener('click', function(event) {
            event.preventDefault();

            const imageContainer = this.parentNode;
            const imageId = imageContainer.dataset.imageId;
            
            // Remove the image container from the preview
            imageContainer.remove();

            // Remove the corresponding file input if the image was selected
            const fileInput = document.querySelector('input[type="file"]');
            if (fileInput) {
                const selectedFiles = fileInput.files;
                for (let i = 0; i < selectedFiles.length; i++) {
                    if (selectedFiles[i].getAttribute('data-image-id') === imageId) {
                        fileInput.value = ''; // Clear the file input
                        break;
                    }
                }
            }
        });
    });
});


<!-- Inside your Twig template -->
 // Add an event listener to the governorate select field
document.addEventListener('DOMContentLoaded', function () {
    const governorateSelect = document.querySelector('#club_governorate');
    const citySelect = document.querySelector('#club_city');

    // Function to fetch cities for a given governorate
    function fetchCities(selectedGovernorate) {
        fetch('{{ path('fetch_cities') }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: 'governorate=' + encodeURIComponent(selectedGovernorate),
        })
        .then(response => response.json())
        .then(data => {
            const cities = data.cities;
            const cityOptions = cities.map(city => `<option value="${city}">${city}</option>`).join('');
            citySelect.innerHTML = cityOptions;

            // If city value is set, select it
            if ("{{ club.city }}" !== "") {
                citySelect.value = "{{ club.city }}";
            }
        })
        .catch(error => {
            console.error('Error fetching cities:', error);
            citySelect.innerHTML = '<option value="">Error fetching cities</option>';
        });
    }

    // If governorate value is set, fetch cities for it
    if ("{{ club.governorate }}" !== "") {
        fetchCities("{{ club.governorate }}");
    }

    governorateSelect.addEventListener('change', function () {
        const selectedGovernorate = this.value;
        if (!selectedGovernorate) {
            // No governorate selected, clear city dropdown
            citySelect.innerHTML = '<option value="">Select Governorate first</option>';
            return;
        }

        // Fetch cities for the selected governorate using AJAX
        fetchCities(selectedGovernorate);
    });
});


</script>

<script>
    var map;
    var marker;

   function initMap() {
    // Initialize the map
    map = new google.maps.Map(document.getElementById('map'), {
        center: {lat: 36.9034, lng: 10.1874},
        zoom: 14
    });

    // Get the latitude and longitude values from the hidden inputs
    var latitudeInput = document.getElementById('club_latitude');
    var longitudeInput = document.getElementById('club_longitude');
    var latLng = {
        lat: parseFloat(latitudeInput.value),
        lng: parseFloat(longitudeInput.value)
    };

    // Add marker at the club's location
    marker = new google.maps.Marker({
        position: latLng,
        map: map
    });

    // Set the map center to the club's location
    map.setCenter(latLng);

    // Add click event listener to the map
    google.maps.event.addListener(map, 'click', function(event) {
        // Get the latitude and longitude of the clicked location
        var clickedLocation = event.latLng;

        // Clear previous marker
        if (marker) {
            marker.setMap(null);
        }

        // Add marker at the clicked location
        marker = new google.maps.Marker({
            position: clickedLocation,
            map: map
        });

        // Set latitude and longitude inputs to clicked location values
        latitudeInput.value = clickedLocation.lat();
        longitudeInput.value = clickedLocation.lng();
    });
}

</script>

      <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCgClXCMDHYkdbbt_7lWCLNVYKhivPdCiM&callback=initMap" async defer></script>
{{ form_end(form) }}
