{% extends 'home/Base.html.twig' %}
 
 {% block m%}


 {% endblock %}
  {% block t %}


      <div class="content" style="position:relative;top:100px;">
          <div class="bloc">
              <h1 style="position:relative; top:10px; right:-130px;">Events</h1>
              <form id="filterForm" action="{{ path('app_home') }}" method="GET">
                  <label for="filterDropdown">Filter by:</label>
                  <select id="filterDropdown" name="orderBy">
                      <option value="">Select Filter</option>
                      <option value="name">Name</option>
                      <option value="datedeb">Start Date</option>
                      <option value="nbrparticipants">Number of Participants</option>
                  </select>
                  <!-- Hidden input field to hold the selected value from the dropdown -->
                  <input type="hidden" id="filterValue" name="filterValue">
              </form>


              {% if events is empty %}
                  <p>No events found.</p>
              {% else %}
                  <div class="card-container">
                      {% for event in events %}
                          {% if event.idimage|length > 0 %}
                              <div class="card" style="background-image: url('{{ asset(event.idimage[0].url) }}')">
                                  <div class="card-content">
                                      <h3>{{ event.name }}</h3>
                                      <p>Start Date: {{ event.datedeb|date('F j, Y') }}</p>
                                      <p>End Date: {{ event.datefin|date('F j, Y') }}</p>
                                      <p>Start Time: {{ event.starttime|date('h:i A') }}</p>
                                      <p>End Time: {{ event.endtime|date('h:i A') }}</p>
                                      <p>Number of Participants: {{ event.nbrparticipants }}</p>
                                      <p>Price: {{ event.price }}DT</p>
                                      <div class="btn-group">
                                          <button class="like-btn btn" onclick="likeEvent({{ event.id }})"><i class="far fa-heart"></i> Like</button>
                                          <!-- Add the join event button -->
                                          <button class="join-btn btn" onclick="joinEvent()"><i class="fas fa-plus"></i> Join Event</button>
                                          <a href="{{ path('Qr_Code', {'eventId': event.id}) }}" class="btn-link show-tasks-btn">Show Tasks</a>
                                          <img class="qr-code-img" src="" alt="QR Code" style="display: none;">

                                      </div>
                                  </div>
                              </div>
                          {% endif %}
                      {% endfor %}
                  </div>
              {% endif %}
          </div>


          <br><br>
<br>
<br>

<br>
<br>
<br>
<br>
<br>
<br>
<br>
</div>

<style>

    .bloc .h1{
        
    }
  /* Style the counter cards */
    .card {
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
        padding: 20px;
        text-align: center;
        background-size: cover;
        background-position: center;
        transition: transform 0.3s ease, height 0.3s ease; /* Add height transition */
        /* Adjust width for responsiveness */
        max-width: 300px; /* Set max-width for responsiveness */
        /* Add margin bottom for spacing */
        /* Add position relative for absolute positioning */
        overflow: hidden; /* Hide overflow content */
        transition: transform 0.3s ease, height 0.3s ease; /* Hide overflow content */
        background-size: cover;
        background-position: center; /* Add margin right for spacing */
        border-radius: 10px; /* Add border radius */
    }

        .card:nth-child(3n) {
            margin-right: 0; /* Remove margin right for every third card to ensure alignment */
        }
        .card .image-container {
    position: relative;
    overflow: hidden;
}

.card .image-container img {
    width: 100%;
    height: auto;
    filter: blur(0); /* Initially no blur */
    transition: filter 0.3s ease;
}

.card:hover .image-container img {
    filter: blur(10px); /* Adjust the blur value as needed */
}
        /* Hover effect */
        .card:hover {
            transform: translateY(-5px);
            height: auto; 
     
   //* Allow card to expand */
        }
   .card::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
 
    backdrop-filter: blur(10px); /* Apply blur effect to the pseudo-element */
    z-index: -1;
}

.blurred {
    filter: blur(10px); /* Adjust the blur value as needed */
}


        /* Show buttons and info when hovering */
        .card:hover .btn-group {
            opacity: 1; /* Show the button group */
        }


        .card p {
            display: none; /* Initially hide event info */
            position: relative; /* Use relative positioning */
            background-color: rgba(255, 255, 255, 0.8);
            padding: 10px;
            border-radius: 5px;
            margin-top: 10px; /* Add margin between paragraphs */
        }

        .card:hover p {
            display: block; /* Show event info on hover */
        }


.card img {
    filter: blur(0); /* Initially, no blur */
    transition: filter 0.3s ease; /* Add transition for smoother effect */
}

.card:hover img {
    filter: blur(10000px); /* Apply blur effect on hover */
}



        /* Style the like and join buttons */
        
      
        .liked {
            color: red; /* Change the color to red when liked */
        }
    .card-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* 3 columns */
    grid-gap: 20px; /* Add gap between cards */
}
    #filterForm {
        margin-bottom: 20px; /* Add margin below the form */
    }

    #filterDropdown, /* Style the select dropdown */
    #filterValue { /* Style the hidden input field */
        border-radius: 5px; /* Add border radius */
        font-family: 'Roboto', sans-serif; /* Apply font family */
        padding: 8px 12px; /* Add padding */
        margin-right: 10px; /* Add margin for spacing */
        border: 1px solid #ccc; /* Add border */
    }

    /* Style the submit button */
    #filterForm button[type="submit"] {
        background-color: #218838; /* Green background color */
        color: #fff; /* Text color */
        border: none; /* Remove border */
        border-radius: 5px; /* Add border radius */
        padding: 10px 20px; /* Add padding */
        cursor: pointer; /* Add pointer cursor */
        transition: background-color 0.3s ease; /* Add transition */
    }

    #filterForm button[type="submit"]:hover {
        background-color: #1e7e34; /* Darker green on hover */
    }

    .card-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* 3 columns */
    grid-gap: 20px; /* Add gap between cards */
}
    .bloc h1 {
        font-family: 'Nunito Sans', sans-serif;
        font-size: 2.5em;
        opacity: 0;
        margin-bottom: 20px;
        background-image: linear-gradient(to right, black 50%, green 50%);
        background-clip: text;
        -webkit-background-clip: text;
        color: transparent;
        animation: slideIn 1s ease-in-out forwards;
    }

    .content {
        position: absolute;
        top: -100px; /* Adjust the top value to move the content higher */
    }

/* Additional styles for the plus and minus icons */
.fa-plus:before {
    content: '\f067'; /* Unicode character for plus icon */
}

.fa-minus:before {
    content: '\f068'; /* Unicode character for minus icon */
}


/* Button styles */
.btn {
    background-color: transparent; /* Light green background color */
    color: #fff; /* Text color */
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.btn:hover {
    background-color: #218838; /* Darker green on hover */
}

    @keyframes slideIn {
        0% {
            opacity: 0;
            color: black; /* Start with black color */
            font-size: 0; /* Start with font size 0 */
        }
        100% {
            opacity: 1;
            color: green; /* End with green color */
            font-size: 2.5em; /* End with original font size */
        }
    }


</style>
      {% endblock %}
      {% block partners %}

      {% endblock %}
    {% block stylesheets %}
 <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    {% endblock %}

{% block javascript %}
{{ parent() }}
<script>
    document.addEventListener("DOMContentLoaded", function() {
        const header = document.querySelector(".bloc h1");
        const text = header.textContent.trim();
        header.textContent = "";

        for (let i = 0; i < text.length; i++) {
            const span = document.createElement("span");
            span.textContent = text[i];
            span.style.animation = `slideIn 1s ease forwards ${i * 0.1}s`; // Apply animation to each letter
            header.appendChild(span);
        }

        header.style.opacity = "1"; // Show the header after creating spans
    });

    function likeEvent(eventId) {
        // Ask for confirmation
        const confirmation = confirm("Are you sure you want to like this event?");

        if (!confirmation) {
            return; // If user cancels, do nothing
        }

        fetch('/event/' + eventId + '/like', {
            method: 'POST',
        })
        .then(response => {
            if (response.ok) {
                return response.json(); // Parse the JSON response
            } else {
                throw new Error('Failed to like event');
            }
        })
        .then(data => {
            // Handle the JSON response data
            console.log(data.message); // Log the success message
            // You can update the UI or show a message to the user here
        })
        .catch(error => {
            console.error('Error:', error.message); // Log any errors
            // You can handle errors here, such as displaying an error message to the user
        });
    }

    // Add onchange event listener to the dropdown
document.getElementById('filterDropdown').addEventListener('change', function() {
    var selectedFilter = this.value;
    if (selectedFilter) {
        // Set the selected filter value in the hidden input field
        document.getElementById('filterValue').value = selectedFilter;
        // Submit the form
        document.getElementById('filterForm').submit();
    }
});

</script>
{% endblock %}



    