{% extends 'home/Base.html.twig' %}
 
 {% block m%}


 {% endblock %}
  {% block t %}


   <div class="content" style="position:relative;top:100px;">
    <div class="bloc">
        <h1 style="position:relative;
        top:10px; right:-130px; "> Events</h1>

        {% if events is empty %}
            <p>No events found.</p>
        {% else %}
            <div class="card-container">

                {% for event in events %}
                    {% if event.idimage|length > 0 %}
                    
                        <div class="card" style="background-image: url('{{ asset(event.idimage[0].url) }}')">
                            <div class="card-content">
                                <h3>{{ event.name }}</h3>
                                <p>Start Date: {{ event.datedeb|date('F j, Y') }}</p>
                                <p>End Date: {{ event.datefin|date('F j, Y') }}</p>
                                <p>Start Time: {{ event.starttime|date('h:i A') }}</p>
                                <p>End Time: {{ event.endtime|date('h:i A') }}</p>
                                <p>Number of Participants: {{ event.nbrparticipants }}</p>
                                <p>Price: {{ event.price }}DT</p>
                                  <div class="btn-group">
                                    <button class="like-btn btn" onclick="likeToggle(this)"><i class="far fa-heart"></i> Like</button>
                                    <button class="join-btn btn" onclick="joinEvent()"><i class="fas fa-plus"></i> Join Event</button>
                                </div>
                            </div>
                        </div>
                    {% endif %}
                {% endfor %}
            </div>
        {% endif %}
    </div>
    <br><br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
</div>

<style>

    .bloc .h1{
        
    }
  /* Style the counter cards */
        .card {
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
            padding: 20px;
            text-align: center;
            background-size: cover;
            background-position: center;
            transition: transform 0.3s ease, height 0.3s ease; /* Add height transition */
            /* Adjust width for responsiveness */
            max-width: 300px; /* Set max-width for responsiveness */
          /* Add margin bottom for spacing */
          /* Add position relative for absolute positioning */
           overflow: hidden; /* Hide overflow content */
    transition: transform 0.3s ease, height 0.3s ease; /* Hide overflow content */
          
            background-size: cover;
            background-position: center;/* Add margin right for spacing */
        }

        .card:nth-child(3n) {
            margin-right: 0; /* Remove margin right for every third card to ensure alignment */
        }
        .card .image-container {
    position: relative;
    overflow: hidden;
}

.card .image-container img {
    width: 100%;
    height: auto;
    filter: blur(0); /* Initially no blur */
    transition: filter 0.3s ease;
}

.card:hover .image-container img {
    filter: blur(10px); /* Adjust the blur value as needed */
}
        /* Hover effect */
        .card:hover {
            transform: translateY(-5px);
            height: auto; 
     
   //* Allow card to expand */
        }
   .card::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
 
    backdrop-filter: blur(10px); /* Apply blur effect to the pseudo-element */
    z-index: -1;
}

.blurred {
    filter: blur(10px); /* Adjust the blur value as needed */
}


        /* Show buttons and info when hovering */
        .card:hover .btn-group {
            opacity: 1; /* Show the button group */
        }


        .card p {
            display: none; /* Initially hide event info */
            position: relative; /* Use relative positioning */
            background-color: rgba(255, 255, 255, 0.8);
            padding: 10px;
            border-radius: 5px;
            margin-top: 10px; /* Add margin between paragraphs */
        }

        .card:hover p {
            display: block; /* Show event info on hover */
        }


.card img {
    filter: blur(0); /* Initially, no blur */
    transition: filter 0.3s ease; /* Add transition for smoother effect */
}

.card:hover img {
    filter: blur(10000px); /* Apply blur effect on hover */
}



        /* Style the like and join buttons */
        
      
        .liked {
            color: red; /* Change the color to red when liked */
        }
    .card-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* 3 columns */
    grid-gap: 20px; /* Add gap between cards */
}


    .card-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* 3 columns */
    grid-gap: 20px; /* Add gap between cards */
}
.bloc h1 {
    font-family: 'Nunito Sans', sans-serif; /* Change the font family to 'Roboto' */
    font-size: 2.5em; /* Adjust the font size as needed */
    color: #333; /* Set the color of the text */
    opacity: 0; /* Initially set opacity to 0 */
    animation: slideIn 1s ease-in-out forwards; /* Add animation */
}



/* Additional styles for the plus and minus icons */
.fa-plus:before {
    content: '\f067'; /* Unicode character for plus icon */
}

.fa-minus:before {
    content: '\f068'; /* Unicode character for minus icon */
}


/* Button styles */
.btn {
    background-color: transparent; /* Light green background color */
    color: #fff; /* Text color */
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.btn:hover {
    background-color: #218838; /* Darker green on hover */
}

@keyframes slideIn {
    0% {
        opacity: 0;
    }
    100% {
        opacity: 1;
    }
}



</style>
      {% endblock %}
      {% block partners %}

      {% endblock %}
    {% block stylesheets %}
 <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    {% endblock %}

{% block javascript %}
    {{ parent() }}
    <script>
    document.addEventListener("DOMContentLoaded", function() {
        const header = document.querySelector(".bloc h1");
        const text = header.textContent.trim();
        header.textContent = "";

        for (let i = 0; i < text.length; i++) {
            const span = document.createElement("span");
            span.textContent = text[i];
            span.style.animation = `slideIn 1s ease forwards ${i * 0.1}s`; // Apply animation to each letter
            header.appendChild(span);
        }

        header.style.opacity = "1"; // Show the header after creating spans
    });
    </script>
{% endblock %}
    